<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, October 01, 2016, 2:43 PM -->
<!-- MuClient version 5.01 -->

<!-- Plugin "Questmaster" generated by Plugin Wizard -->


<muclient>
<plugin
   name="Questmaster"
   author="Meaningless"
   id="fce2abf6aa08bcf0d73e704a"
   language="Lua"
   purpose="Manage Quest Information"
   date_written="2016-10-01 14:38:24"
   requires="5.01"
   version="1.0"
   save_state="y"
   >

</plugin>
<!--  Get our standard constants -->
<include name="constants.lua"/>

<timers>
  <timer
   name="TNQTimer"
   script="UpdateWaitTimer"
   enabled="y"
   minute="1"
   at_time="n"
   >
  </timer>

</timers>

<script>
<![CDATA[

require "serialize"
require "movewindow"
require "commas"
require "gmcphelper"
require "copytable"
require "checkplugin"

 -- some globals -- 
background_colour     = 0x000000
title_color			  = 0xcab9ac
title_border_color_1  = 0xf7ebdd
title_border_color_2  = 0xb09784
border_colour         = 0xcccccc
font_colour           = 0xffffff
default_width         = 200
default_height        = 150
default_x             = 50
default_y             = 250
MIN_WIDTH			  = 10
MIN_HEIGHT			  = 10
LEFT_MARGIN     = 10
TOP_MARGIN      = 5
TITLE_MARGIN = 3
default_font_size = 9
default_font_name = "Consolas"

win = GetPluginID()
function OnPluginListChanged ()
	do_plugin_check_now ("abc1a0944ae4af7586ce88dc", "aard_repaint_buffer") -- check we have the repaint buffer plugin
	do_plugin_check_now ("3e7dedbe37e44942dd46d264", "aard_GMCP_handler")    -- check we have GMCP plugin
	do_plugin_check_now ("462b665ecb569efbf261422f", "aard_miniwindow_z_order_monitor") -- check we have z order plugin
end

function DrawWindow()

	-- draw title
	minTitleWidth = math.max(MIN_WIDTH, 4 + TITLE_MARGIN * 2 + WindowTextWidth(win, font_id, "QuestMaster", false)) -- 4 is the number of pixels of the border
	minTitleHeight = math.max(MIN_HEIGHT, TITLE_MARGIN * 2 + line_height) -- remove 2 pix for the upper/lower space for rendering accents
	
	-- get window size
	contentHeight = TOP_MARGIN * 2
	contentWidth = 0
	if page_built then
		for i, v in ipairs(questInfoDisplay) do
			top = TOP_MARGIN + (i-1) * line_height
			left = LEFT_MARGIN * 2 + WindowTextWidth(win, font_id, v.label, false) + WindowTextWidth(win, font_id, v.info, false)
			contentHeight = contentHeight + line_height
			contentWidth = math.max(contentWidth, left)
			
		end
	else
		contentWidth = LEFT_MARGIN * 2 + WindowTextWidth(win, font_id, "Waiting for Quest Information", false)
		contentHeight = TOP_MARGIN * 2 + line_height
	end
	
	-- resize window
	width = math.max(contentWidth, MIN_WIDTH)
	height = math.max(contentHeight + minTitleHeight, MIN_HEIGHT)
	
	WindowDeleteAllHotspots(win)
	
	WindowResize(win, width, height, background_colour)
	
	-- draw window
	WindowRectOp(win, 2, 0, 0, 0, 0, background_colour) -- blank 
	
	-- draw borders
	WindowRectOp (win, 1, 0, 0, 0, 0, border_colour, 15)
	WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15)
	
	-- draw title
	WindowRectOp(win, 2, 1, 1, -1, minTitleHeight, title_color) -- title
	WindowRectOp(win, 4, 1, 1, -1, minTitleHeight, title_border_color_1, title_border_color_2) -- title border
	WindowText(win, font_id, "QuestMaster", TITLE_MARGIN + 2, TITLE_MARGIN, 0, 0, 0x000000) -- title text
	
	if page_built then
		for i, v in ipairs(questInfoDisplay) do
			top = minTitleHeight + TOP_MARGIN + (i-1) * line_height
			left = LEFT_MARGIN
			left = left + WindowText(win, font_id, v.label, left, top, 0, 0, font_colour)
			
			-- add hyperlink
			if v.label == "Room      : " then
				AddMouseClickHotspot("MapHotspot", left, top , left + WindowTextWidth(win, font_id, v.info, false), top + line_height - 1, 1)
			elseif v.label == "Area      : " then
				AddMouseClickHotspot("AreaHotspot", left, top , left + WindowTextWidth(win, font_id, v.info, false), top + line_height - 1, 1)
			end
			left = left + WindowText(win, font_id, v.info, left, top, 0, 0, font_colour)
		end
	else
		left = LEFT_MARGIN + WindowText(win, font_id, "Waiting for Quest Information", LEFT_MARGIN, minTitleHeight + TOP_MARGIN, 0, 0, font_colour)
	end

	-- Add the drag handler so they can move the window around
	movewindow.add_drag_handler (win, 1, 1, -1, minTitleHeight, 1) -- drag the title
	AddMouseClickHotspot("RightClickHotSpot", 1, minTitleHeight + 1, width, height)
	BroadcastPlugin (999, "repaint")
end

function AddMouseClickHotspot(hotspot_id, left, top, right, bottom, cursor)
	if cursor == nil then
		cursor = 0
	end 
	WindowAddHotspot(win, hotspot_id,  
		left, top, right, bottom,        -- rectangle
		"",        -- MouseOver
		"",  -- CancelMouseOver
		"",        -- MouseDown
		"",  -- CancelMouseDown
		"MouseUp",          -- MouseUp
		"",  -- tooltip text
		cursor, -- cursor
		0)  -- flags
end -- AddMouseClickHotspot

function UpdateWaitTimer(timerName)
	if page_built then
	
		EnableTimer("TNQTimer")
		if (questInfo.action == 'comp' or questInfo.action == 'fail' or questInfo.wait ~= nil) then
			questInfoDisplay = {}
			local TNQ = math.ceil((timeOfNextQuest - os.time() ) / 60)
		
			table.insert(questInfoDisplay, {label="Status : ", info="Waiting", colour=0xffffff})
			table.insert(questInfoDisplay, {label="TNQ    : ", info=string.format("%d", TNQ) .. " min", colour=0xffffff})
			DrawWindow()
			
		elseif (questInfo.action == 'start' or questInfo.timer ~= nil) then
			GenerateQuestTargetInfo(questInfo)
			DrawWindow()
		elseif questInfo.action == 'killed' then
			GeneratedKilledInfo(questInfo)
			DrawWindow()
		end
	end
end -- UpdateWaitTimer

function GenerateQuestTargetInfo(questInfo)
	questInfoDisplay = {}
	local TimeToComplete = math.ceil((timeOfQuestEnd - os.time()) / 60)
	table.insert(questInfoDisplay, {label="Target    : ", info=questInfo.targ, colour=0xffffff})
	table.insert(questInfoDisplay, {label="Area      : ", info=questInfo.area, colour=0xffffff, hyperlink=""})
	table.insert(questInfoDisplay, {label="Room      : ", info=questInfo.room, colour=0xffffff, hyperlink=""})
	table.insert(questInfoDisplay, {label="Time Left : ", info=string.format("%d", TimeToComplete) .. " min", colour=0xffffff})
end -- GenerateQuestTargetInfo

function GeneratedKilledInfo(questInfo)
	questInfoDisplay = {}
	local TimeToComplete = math.ceil((timeOfQuestEnd - os.time()) / 60)
	table.insert(questInfoDisplay, {label="Your Quest Target is Killed.", info="", colour=0xff0000})
	table.insert(questInfoDisplay, {label="Return to the Quest Master.", info="", colour=0xff0000})
	table.insert(questInfoDisplay, {label="Time Left:  ", info=string.format("%d", TimeToComplete) .. " min", colour=0xffffff})
end -- GeneratedKilledInfo

function BuildQuestInfo (questInfo)
	questInfoDisplay = {}
	
	if questInfo.action == 'ready' or  questInfo.status == 'ready' then
		table.insert(questInfoDisplay, {label="Q: ", info="You can now quest again.", colour=0xffffff})
	elseif questInfo.action == 'start' or questInfo.timer ~= nil then
		timeOfQuestEnd =  os.time() + questInfo.timer * 60
		GenerateQuestTargetInfo(questInfo)
	elseif questInfo.action == 'reset' or questInfo.timer ~= nil then
		timeOfNextQuest = os.time() + questInfo.timer * 60
		table.insert(questInfoDisplay, {label="Status : ", info="Waiting", colour=0xffffff})
		table.insert(questInfoDisplay, {label="TNQ    : ", info=questInfo.timer .. " min", colour=0xffffff})
	elseif questInfo.action == 'fail' or questInfo.action == 'comp' or questInfo.wait ~= nil then
		timeOfNextQuest = os.time() + questInfo.wait * 60
		table.insert(questInfoDisplay, {label="Status : ", info="Waiting", colour=0xffffff})
		table.insert(questInfoDisplay, {label="TNQ    : ", info=questInfo.wait .. " min", colour=0xffffff})
	elseif questInfo.action == 'timeout' then
		timeOfNextQuest = os.time() + questInfo.wait * 60
		table.insert(questInfoDisplay, {label="Status : ", info="Waiting", colour=0xffffff})
		table.insert(questInfoDisplay, {label="TNQ    : ", info=questInfo.wait .. " min", colour=0xffffff})
	elseif questInfo.action == 'killed' then
		GeneratedKilledInfo(questInfo)
	elseif questInfo.action == 'warning' then

	end
	page_built = true
	DrawWindow()
end -- CreateQuestMW

function OnPluginBroadcast (msg, id, name, text)
	if id == '3e7dedbe37e44942dd46d264' then -- aard gmcp handler
		if text:find("comm.quest") then
			res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","comm.quest")
			questInfo = assert (loadstring ('return ' .. gmcparg or ""))()
			BuildQuestInfo(questInfo)
		end
	end
end -- OnPluginBroadcast

function RightClickMenu()
	selection = WindowMenu(win, WindowInfo(win, 14), WindowInfo(win, 15),
							"Change Font | - | Bring To Front | Send To Back")
	
	if selection == "Bring To Front" then
		CallPlugin("462b665ecb569efbf261422f","boostMe", win)
	elseif selection == "Send To Back" then
		CallPlugin("462b665ecb569efbf261422f","dropMe", win)
	elseif selection == "Change Font" then
		selectedFont = utils.fontpicker (font_name, font_size) --font dialog
		if selectedFont then
			font_name = selectedFont.name
			font_size = selectedFont.size
			SetVariable("font_name", font_name)
			SetVariable("font_size", font_size)
			movewindow.save_state(win)
			SetFontInfo()
			DrawWindow()
		end
	end
end -- RightClickMenu

function MouseUp(flags, hotspot_id, win)
	if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 and hotspot_id == "RightClickHotSpot" then
		RightClickMenu()
	elseif bit.band (flags, miniwin.hotspot_got_lh_mouse) ~= 0 and hotspot_id == "AreaHotspot" then
		print("clicked on area")
	elseif bit.band (flags, miniwin.hotspot_got_lh_mouse) ~= 0 and hotspot_id == "MapHotspot" then
		print("clicked on room")
	end
	return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

function SetFontInfo()
	WindowFont (win, font_id, font_name, font_size, false, false, false, false) --- Grab font size settings.
	font_height = WindowFontInfo (win, font_id, 1) - WindowFontInfo (win, font_id, 4) + 1 -- height
	font_width  = WindowFontInfo (win, font_id, 6)  -- avg width
	line_height = font_height + 1
end -- SetFontInfo

function OnPluginInstall ()
	WindowCreate (win, 600, 600, 1, 1, 0, 0, background_colour) 

	font_id        = "Questmaster_font"
	local fonts = utils.getfontfamilies()
	font_name = GetVariable("font_name") or default_font_name
	font_size = tonumber(GetVariable("font_size")) or default_font_size
	
	SetFontInfo()

	--- Pull some state variables.
	background_colour = tonumber(GetVariable ("background_colour")) or background_colour
	height = tonumber(GetVariable ("height")) or default_height
	width = tonumber(GetVariable ("width")) or default_width

	--- install the window movement handler, get back the window position.
	windowinfo = movewindow.install (win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})

	--- Setup the window
	check(WindowCreate(win, 
		windowinfo.window_left, windowinfo.window_top,
		width, height,
		windowinfo.window_mode,
		windowinfo.window_flags,
		background_colour))
	WindowShow(win, true)
	
	DrawWindow()

	if IsConnected() then
		Send_GMCP_Packet("request quest")
	end
end -- OnPluginInstall

function OnPluginDisable ()
	WindowShow( win, false )
end -- OnPluginDisable

function OnPluginClose ()
	OnPluginDisable()
	WindowDelete(win)
end -- OnPluginClose

function OnPluginEnable ()
	WindowShow( win, true)

	if IsConnected() then
		Send_GMCP_Packet("request quest")
	end

end -- OnPluginEnable


function OnPluginConnect ()
	WindowShow( win, true)

	Send_GMCP_Packet("request quest")

end -- function OnPluginConnect

function OnPluginDisconnect ()

end -- function OnPluginConnect



function OnPluginSaveState ()
	-- save window current location for next time  
	movewindow.save_state (win)
	SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
	SetVariable ("background_colour", background_colour)
	SetVariable ("width", width)
	SetVariable ("height", height)
	SetVariable ("font_name", font_name)
	SetVariable ("font_size", font_size)
end -- function OnPluginSaveState


]]>
</script>


</muclient>
