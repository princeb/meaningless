<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, October 01, 2016, 2:43 PM -->
<!-- MuClient version 5.01 -->

<!-- Plugin "Questmaster" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Questmaster"
   author="Meaningless"
   id="fce2abf6aa08bcf0d73e704a"
   language="Lua"
   purpose="Manage Quest Information"
   date_written="2016-10-01 14:38:24"
   requires="5.01"
   version="1.0"
   save_state="y"
   >

</plugin>
<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Aliases  -->

<aliases>
  <alias
   match="#alias {*} {*}"
   enabled="y"
   group="special_convenience_aliases"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  <send>require "addxml"  -- addxml extension

-- add the alias

addxml.alias {
  name = "command_line_alias_" .. string.gsub(Base64Encode("%1"), "=", ""), 
  match = "%1",
  send = "%2",
  sequence = 100,
  enabled = true,
  send_to = 10,
  group = "command_line_aliases"
             }

ColourNote ("white", "green", "Added alias to match on '%1', sending '%2'")
  </send>
  </alias>
  <alias
   match="#trigger {*} {*}"
   enabled="y"
   group="special_convenience_aliases"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  <send>require "addxml"  -- addxml extension

-- add the trigger 

addxml.trigger {
  name = "command_line_trigger_" .. string.gsub(Base64Encode("%1"), "=", ""), 
  match = "%1", 
  send = "%2",
  sequence = 100,
  enabled = true,
  send_to = 10,
  group = "command_line_triggers"
               }

ColourNote ("white", "green", "Added trigger to match on '%1', sending '%2'")
  </send>
  </alias>
</aliases>


<timers>
  <timer
   name="TNQTimer"
   script="UpdateWaitTimer"
   enabled="y"
   minute="1"
   at_time="n"
   >
  </timer>

</timers>

<!--  Scripts  -->

<script>
<![CDATA[

require "serialize"
require "movewindow"
require "commas"
require "gmcphelper"
require "copytable"
require "checkplugin"

 -- some globals -- 
background_colour     = 0x000000
border_colour         = 0xcccccc
font_colour           = 0xffffff
default_width         = 200
default_height        = 150
default_x             = 50
default_y             = 250
MIN_WIDTH			  = 10
MIN_HEIGHT			  = 10
RESIZE_TAG_SIZE = 10
MIN_SIZE        = 100
LEFT_MARGIN     = 10
TOP_MARGIN      = 5
default_font_size = 9
default_font_name = 'Consolas'


win = GetPluginID()
function OnPluginListChanged ()
	do_plugin_check_now ("abc1a0944ae4af7586ce88dc", "aard_repaint_buffer") -- check we have the repaint buffer plugin
	do_plugin_check_now ("3e7dedbe37e44942dd46d264", "aard_GMCP_handler")    -- check we have GMCP plugin
	do_plugin_check_now ("462b665ecb569efbf261422f", "aard_miniwindow_z_order_monitor") -- check we have z order plugin
end


function SetUpHotspotsAndDraw(firstTime)
	if (firstTime == true) then
		check (WindowCreate (win, 
			windowinfo.window_left, windowinfo.window_top,   -- left, top (auto-positions)
			width,     -- width
			height,  -- height
			windowinfo.window_mode,       -- auto-position: middle right
			windowinfo.window_flags,  -- flags
			background_colour) )                

		WindowShow (win, true)
	end
	
	-- resize window
	if contentWidth < MIN_WIDTH then
		width  = MIN_WIDTH
	else
		width = contentWidth
	end
	if contentHeight < MIN_HEIGHT then
		height  = MIN_HEIGHT
	else
		height = contentHeight
	end
	WindowResize(win, width, height, background_colour)
	
	-- Add the drag handler so they can move the window around
	movewindow.add_drag_handler (win, 0, 0, 0, 0)
	DrawWindow()
end

function DrawWindow()
	WindowRectOp(win, 2, 0, 0, 0, 0, background_colour) -- blank 
	if page_built then
		for i, v in ipairs(questInfoDisplay) do
			top = TOP_MARGIN + (i-1) * line_height
			left = LEFT_MARGIN
			left = left + WindowText(win, font_id, v.label, left, top, 0, 0, font_colour)
			left = left + WindowText(win, font_id, v.info, left, top, 0, 0, font_colour)
		end
	else
		left = LEFT_MARGIN + WindowText(win, font_id, "Waiting for Quest Information", LEFT_MARGIN, TOP_MARGIN, 0, 0, font_colour)
	end

	
	-- draw edge frame.
	WindowRectOp (win, 1, 0, 0, 0, 0, border_colour, 15)
	WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15)
	BroadcastPlugin (999, "repaint")
end

function GetWindowSize()
	contentHeight = TOP_MARGIN * 2
	contentWidth = 0
	if page_built then
		for i, v in ipairs(questInfoDisplay) do
			top = TOP_MARGIN + (i-1) * line_height
			left = LEFT_MARGIN * 2 + WindowTextWidth(win, font_id, v.label, left, top, 0, 0, font_colour) + WindowTextWidth(win, font_id, v.info, left, top, 0, 0, font_colour)
			contentHeight = contentHeight + line_height
			if left > contentWidth then
				contentWidth = left
			end
		end
	else
		contentWidth = LEFT_MARGIN * 2 + WindowTextWidth(win, font_id, "Waiting for Quest Information", LEFT_MARGIN, TOP_MARGIN, 0, 0, font_colour)
		contentHeight = TOP_MARGIN * 2 + line_height
	end
end -- GetWindowSize

function UpdateWaitTimer (timerName)
	if page_built then
	
		EnableTimer("TNQTimer")
		if (questInfo.action == 'comp' or questInfo.action == 'fail' or questInfo.wait ~= nil) then
			local TNQ = (timeOfNextQuest - os.time() ) / 60
		
			questInfoDisplay = {}
			table.insert(questInfoDisplay, {label="Status : ", info="Waiting", colour=0xffffff})
			table.insert(questInfoDisplay, {label="TNQ    : ", info=string.format("%d", TNQ) .. " min", colour=0xffffff})
			
			GetWindowSize()
			SetUpHotspotsAndDraw()
		elseif (questInfo.action == 'start' or questInfo.timer ~= nil) then
			local TimeToComplete = (timeOfQuestEnd - os.time()) / 60
			
			questInfoDisplay = {}
			table.insert(questInfoDisplay, {label="Target    : ", info=questInfo.targ, colour=0xffffff})
			table.insert(questInfoDisplay, {label="Area      : ", info=questInfo.area, colour=0xffffff})
			table.insert(questInfoDisplay, {label="Room      : ", info=questInfo.room, colour=0xffffff})
			table.insert(questInfoDisplay, {label="Time Left : ", info=string.format("%d", TimeToComplete) .. " min", colour=0xffffff})
			GetWindowSize()
			SetUpHotspotsAndDraw()
		end
	end
end -- UpdateWaitTimer

function BuildQuestInfo (questInfo)
	questInfoDisplay = {}
	print ('start of qI debug..')
	for i, v in pairs (questInfo) do
		print (i .. ' ' .. v)
	end
	print ('end of qi debug')
	if questInfo.action == 'ready' or  questInfo.status == 'ready' then
		-- You can now quest again
		table.insert(questInfoDisplay, {label="Q: ", info="You can now quest again.", colour=0xffffff})
	elseif questInfo.action == 'start' or questInfo.timer ~= nil then
		timeOfQuestEnd =  os.time() + questInfo.timer * 60
		table.insert(questInfoDisplay, {label="Target    : ", info=questInfo.targ, colour=0xffffff})
		table.insert(questInfoDisplay, {label="Area      : ", info=questInfo.area, colour=0xffffff})
		table.insert(questInfoDisplay, {label="Room      : ", info=questInfo.room, colour=0xffffff})
		table.insert(questInfoDisplay, {label="Time Left : ", info=questInfo.timer, colour=0xffffff})
	elseif questInfo.action == 'fail' or questInfo.action == 'comp' or questInfo.wait ~= nil then
		timeOfNextQuest = os.time() + questInfo.wait * 60
		table.insert(questInfoDisplay, {label="Status : ", info="Waiting", colour=0xffffff})
		table.insert(questInfoDisplay, {label="TNQ    : ", info=questInfo.wait .. " min", colour=0xffffff})
		-- questInfo.qp
		-- questInfo.tierqp
		-- questInfo.pracs
		-- questInfo.trains
		-- questInfo.tp
		-- questInfo.mccp
		-- questInfo.lucky
		-- questInfo.double
		-- questInfo.totqp
		-- questInfo.gold
		-- questInfo.completed
		-- questInfo.wait
	elseif questInfo.action == 'timeout' then
		-- time out?
		-- questInfo.wait
	elseif questInfo.action == 'killed' then
		table.insert(questInfoDisplay, {label="Your Quest Target is Killed.", info="", colour=0xff0000})
		table.insert(questInfoDisplay, {label="Return to the Quest Master.", info="", colour=0xff0000})
		table.insert(questInfoDisplay, {label="Time Left:  ", info=questInfo.time})
		-- questInfo.time
	elseif questInfo.action == 'warning' then
		-- questInfo.time
	elseif questInfo.action == 'reset' then
		-- questInfo.time
	end
	page_built = true
	GetWindowSize()
	SetUpHotspotsAndDraw()
end -- CreateQuestMW

function OnPluginBroadcast (msg, id, name, text)
	if id == '3e7dedbe37e44942dd46d264' then -- aard gmcp handler
		if text:find("comm.quest") then
			res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","comm.quest")
			questInfo = assert (loadstring ('return ' .. gmcparg or ""))()
			BuildQuestInfo(questInfo)
			--[[
			if questInfo.action == 'status' then
				setQuestTimer()
			end
			--]]
		end
	end
end -- OnPluginBroadcast

-- callbacks

function OnPluginInstall ()
	-- make window so I can grab the font info
	WindowCreate (win, 600, 600, 1, 1, 0, 0, background_colour) 

	font_id        = "Questmaster_font"

	local fonts = utils.getfontfamilies ()

	font_name = GetVariable("font_name") or default_font_name
	font_size = tonumber(GetVariable("font_size")) or default_font_size

	--- Load the fonts into the temp window.
	WindowFont (win, font_id, font_name, font_size, false, false, false, false) -- normal font

	--- Grab font size settings.
	font_height = WindowFontInfo (win, font_id, 1) -  WindowFontInfo (win, font_id, 4) + 1 -- height
	font_width  = WindowFontInfo (win, font_id, 6)  -- avg width
	line_height = font_height + 1
	stacked = tonumber(GetVariable("stacked")) or 0
	max_height = (line_height*(((stacked == 1) and 12) or 23))+(TOP_MARGIN+1)

	--- Pull some state variables.
	background_colour = tonumber (GetVariable ("background_colour")) or background_colour
	height = tonumber (GetVariable ("height")) or default_height
	orig_height = height
	width = tonumber (GetVariable ("width")) or default_width

	--- install the window movement handler, get back the window position.
	windowinfo = movewindow.install (win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})

	--- Setup the window.
	GetWindowSize()
	SetUpHotspotsAndDraw(true)

	if IsConnected() then
		Send_GMCP_Packet("request quest")
	end
end -- OnPluginInstall

function OnPluginDisable ()
	WindowShow( win, false )
end -- OnPluginDisable

function OnPluginClose ()
	OnPluginDisable()
	WindowDelete(win)
end -- OnPluginClose

function OnPluginEnable ()
	WindowShow( win, true)

	if IsConnected() then
		Send_GMCP_Packet("request quest")
	end

end -- OnPluginEnable


function OnPluginConnect ()
	WindowShow( win, true)

	Send_GMCP_Packet("request quest")

end -- function OnPluginConnect

function OnPluginDisconnect ()

end -- function OnPluginConnect

function OnPluginSaveState ()
	-- save window current location for next time  
	movewindow.save_state (win)
	SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
	SetVariable ("background_colour", background_colour)
	SetVariable ("width", width)
	SetVariable ("height", height)
	SetVariable ("font_name", font_name)
	SetVariable ("font_size", font_size)
end -- function OnPluginSaveState


]]>
</script>


</muclient>
