<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, November 21, 2016, 9:35 PM -->
<!-- MuClient version 5.03 -->

<!-- Plugin "Inventory" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Inventory"
   author="Meaningless"
   id="2a81aa8203515158d5ae426a"
   language="Lua"
   purpose="Manage Inventory in a window"
   date_written="2016-11-21 21:35:04"
   requires="5.03"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->
<triggers>

  <trigger
   enabled="y"
   match="{invdata}"
   script="ProcessInventory"
   omit_from_output="y"
   name="InventoryStart"
   sequence="100"
   group="InventoryGroup"
  >
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="ProcessInventory"
   omit_from_output="y"
   name="InventoryLines"
   sequence="200"
   group="InventoryGroup"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="{/invdata}"
   script="ProcessInventory"
   omit_from_output="y"
   name="InventoryEnd"
   sequence="100"
   group="InventoryGroup"
  >
  </trigger>
  
  <!--
  <trigger
   enabled="n"
   match="{invmon}"
   script="InventoryChange"
   omit_from_output="y"
   name="InventoryChange"
   sequence="100"
   group="InventoryGroup"
  >
  </trigger>
  
  <trigger
   enabled="n"
   match="{invitem}"
   script="InventoryItemInfo"
   omit_from_output="y"
   name="InventoryItem"
   sequence="100"
   group="InventoryGroup"
  >
  </trigger>
  -->
</triggers>



<script>
<![CDATA[

require "serialize"
require "movewindow"
require "commas"
require "gmcphelper"
require "copytable"
require "checkplugin"

 -- some globals and defaults -- 
BackgroundColour	= 0x000000
TitleColour			= 0xcab9ac
TitleColourLight	= 0xf7ebdd
TitleColourDark		= 0xb09784
BorderColour		= 0xcccccc
FontColour			= 0xffffff
DefaultWidth		= 200
DefaultHeight		= 150
DefaultX			= 50
DefaultY			= 250
DefaultFontSize		= 9
DefaultFontName		= "Consolas"		

InvData = {}

-- constants -- 
LEFT_MARGIN			= 10
TOP_MARGIN			= 5
TITLE_MARGIN		= 3

win = GetPluginID()

function strsplit(s, delim)
	local tab = {}
	local buffer = ""
	for i = 1, #s do
		local c = s:sub(i,i)
		if c == delim then
			table.insert(tab, buffer)
			buffer = ""
		else
			buffer = buffer .. c
		end
	end
	if buffer ~= "" then
		table.insert(tab, buffer)
	end
	return tab

end -- strsplit

function ProcessInvmonTag(invmonTag)
	local x = {}
	for x in string.gmatch(invmonTag, "[^,]*") do
		table.insert(x, tag)
	end
	invChange = {action = x[1], objectid = x[2], containerid = x[3], wearloc = x[4]}
	return invChange
end -- ProcessInvmonTag

function ProcessInvitemTag(invitemTag)
	local x = strsplit(invitemTag, ",")
	item = {objectid = x[1], flags = x[2], itemname = x[3], type = x[4], unique = x[5], wearloc = x[6], timer = x[7]}
	
	return item
end -- ProcessInvitemTag

AardRGB = {
	["@b"] = GetNormalColour(5),
	["@r"] = GetNormalColour(2),
	["@g"] = GetNormalColour(3),
	["@y"] = GetNormalColour(4),
	["@c"] = GetNormalColour(7),
	["@m"] = GetNormalColour(6),
	["@w"] = GetNormalColour(8),
	["@B"] = GetBoldColour(5),
	["@R"] = GetBoldColour(2),
	["@G"] = GetBoldColour(3),
	["@Y"] = GetBoldColour(4),
	["@C"] = GetBoldColour(7),
	["@M"] = GetBoldColour(6),
	["@W"] = GetBoldColour(8),
	["@D"] = GetBoldColour(1),
}

function ColourText(win, text, left, top, right, bottom)
	local colorText = processColourText(text)
	local textwidth = 0
	for i, v in ipairs(colorText) do
		print(v.label)
		textwidth = textwidth + WindowText(win, FontId, v.label, left + textwidth, top, right, bottom, v.color)
	end
	return textwidth
end -- ColourText

function ColourTextWidth(win, text, unicode)
	local colorText = processColourText(text)
	local textwidth = 0
	for i, v in ipairs(colorText) do
		textwidth = textwidth + WindowTextWidth(win, FontId, v.label, unicode)
	end
	return textwidth
end -- ColourText

function FormattedInv()
	local invtab = {}
	for i, v in ipairs(InvData) do
		found = false
		for k, w in ipairs(invtab) do
			if v.itemname == w.itemname then
				w.quantity = w.quantity + 1
				found = true
			end
		end
		if not found then
			table.insert(invtab, {name = v.itemname, quantity = 1, flags = v.flags})
		end
	end
	return invtab
end --FormattedInv

function processColourText(text)
	local textTable = {}
	local color = ""
	local label = ""
	local atSignOn = false
	local xtermOn = false
	for c = 1, #text do
		local i = text:sub(c,c)
		if i == "@" and not atSignOn then
			atSignOn = true
		elseif (not xtermOn) and atSignOn then
			if i == "@" then -- this is a "@" char
				label = label .. i
				atSignOn = false
			elseif i == "x" then -- this is xterm color "@x123" https://upload.wikimedia.org/wikipedia/commons/9/95/Xterm_color_chart.png
				xtermOn = true
				color = "@x"
			else -- start of new color segment
				if label ~= "" then
					table.insert(textTable, {label = label, color = AardRGB[(color == "") and "@w" or color]})
				end
				color = "@" .. i
				label = ""
				atSignOn = false
			end
		elseif xtermOn then
			
		else
			label = label .. i
		end
	end
	if label ~= "" then
		table.insert(textTable, {label = label, color = AardRGB[(color == "") and "@w" or color]})
	end
	return textTable
end -- processColourText

function ProcessInventory(name, line, wildcards, styles)
	if name == "InventoryStart" then
		EnableTrigger("InventoryLines", true)
	elseif name == "InventoryEnd" then
		EnableTrigger("InventoryLines", false)
		DrawWindow() -- captured all the info now draw window
	elseif name == "InventoryLines" then
		table.insert(InvData, ProcessInvitemTag(line))
	end
end -- ProcessInventory

function DrawTitle()
	-- draw title
	minTitleWidth = 4 + TITLE_MARGIN * 2 + WindowTextWidth(win, FontId, "QuestMaster", false) -- 4 is the number of pixels of the border
	minTitleHeight = TITLE_MARGIN * 2 + LineHeight -- remove 2 pix for the upper/lower space for rendering accents
	
	-- draw title
	WindowRectOp(win, 2, 1, 1, -1, minTitleHeight, TitleColour) -- title
	WindowRectOp(win, 4, 1, 1, -1, minTitleHeight, TitleColourLight, TitleColourDark) -- title border
	WindowText(win, FontId, "Inventory", TITLE_MARGIN + 2, TITLE_MARGIN, 0, 0, 0x000000) -- title text
	
	return minTitleWidth, minTitleHeight
end -- DrawTitle

function DrawScrollBar()

end -- DrawScrollBar

function DrawWindow()

	minTitleWidth, minTitleHeight = DrawTitle()
	
	-- get window size
	contentHeight = TOP_MARGIN * 2
	contentWidth = 0
	local inv = FormattedInv()
	for i, v in ipairs(inv) do
		top = TOP_MARGIN + (i-1) * LineHeight
		left = LEFT_MARGIN * 2 + WindowTextWidth(win, FontId, "     ", false) + ColourTextWidth(win, v.name, false)  + WindowTextWidth(win, FontId, v.flags, false)
		contentHeight = contentHeight + top
		contentWidth = math.max(contentWidth, left)
	end 
	
	-- resize window
	width = math.max(contentWidth, minTitleWidth)
	height = contentHeight + minTitleHeight
	
	WindowDeleteAllHotspots(win)
	
	WindowResize(win, width, height, BackgroundColour)
	
	-- draw window
	WindowRectOp(win, 2, 0, minTitleHeight, 0, 0, BackgroundColour) -- blank 
	
	-- draw borders
	WindowRectOp (win, 1, 0, 0, 0, 0, BorderColour, 15)
	WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15)
	
	-- add content to window
	for i, v in ipairs(inv) do
		top = TOP_MARGIN + (i-1) * LineHeight
		left = LEFT_MARGIN * 2 + WindowText(win, FontId, v.quantity, left, top, 0, 0, AardRGB["@w"])
		left = left + WindowText(win, FontId, v.flags, left, top, 0, 0, AardRGB["@w"])
		left = left + ColourText(win, v.name, left, top, 0, 0)
		print(v.quantity .. " " .. v.flags .. " " .. v.name)
	end 

	CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win) -- fail silently
	
	-- Add the drag handler so they can move the window around
	movewindow.add_drag_handler (win, 1, 1, -1, minTitleHeight, 1) -- drag the title
	AddMouseClickHotspot("RightClickHotSpot", 1, minTitleHeight + 1, width, height)
	BroadcastPlugin (999, "repaint")
end

function Scroll(direction)
	
end -- Scroll

function AddMouseClickHotspot(hotspot_id, left, top, right, bottom, cursor)
	if cursor == nil then
		cursor = 0
	end 
	WindowAddHotspot(win, hotspot_id,  
		left, top, right, bottom,        -- rectangle
		"",        -- MouseOver
		"",  -- CancelMouseOver
		"",        -- MouseDown
		"",  -- CancelMouseDown
		"MouseUp",          -- MouseUp
		"",  -- tooltip text
		cursor, -- cursor
		0)  -- flags
end -- AddMouseClickHotspot

function OnPluginBroadcast (msg, id, name, text)
	if id == '3e7dedbe37e44942dd46d264' then -- aard gmcp handler
		-- pass
	elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
		CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
	end
end -- OnPluginBroadcast

function RightClickMenu()
	selection = WindowMenu(win, WindowInfo(win, 14), WindowInfo(win, 15),
							"Change Font | - | Bring To Front | Send To Back")
	
	if selection == "Bring To Front" then
		CallPlugin("462b665ecb569efbf261422f","boostMe", win)
	elseif selection == "Send To Back" then
		CallPlugin("462b665ecb569efbf261422f","dropMe", win)
	elseif selection == "Change Font" then
		selectedFont = utils.fontpicker (FontName, FontSize) --font dialog
		if selectedFont then
			FontName = selectedFont.name
			FontSize = selectedFont.size
			SetVariable("FontName", FontName)
			SetVariable("FontSize", FontSize)
			movewindow.save_state(win)
			SetFontInfo()
			DrawWindow()
		end
	end
end -- RightClickMenu

function MouseUp(flags, hotspot_id, win)
	if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 and hotspot_id == "RightClickHotSpot" then
		RightClickMenu()
	end
	return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

function SetFontInfo()
	WindowFont(win, FontId, FontName, FontSize, false, false, false, false) --- Grab font size settings.
	FontHeight = WindowFontInfo (win, FontId, 1) - WindowFontInfo (win, FontId, 4) + 1 -- height
	FontWidth  = WindowFontInfo (win, FontId, 6)  -- avg width
	LineHeight = FontHeight + 1
end -- SetFontInfo

function OnPluginInstall ()

	-- enable inventory tagging
	world.Send("tags inv on")
	world.Send("invmon on")
	
	
	-- set up windows
	WindowCreate (win, 600, 600, 1, 1, 0, 0, BackgroundColour) 

	FontId        = "Inventory_font"
	local fonts = utils.getfontfamilies()
	FontName = GetVariable("FontName") or DefaultFontName
	FontSize = tonumber(GetVariable("FontSize")) or DefaultFontSize
	
	SetFontInfo()

	--- Pull some state variables.
	BackgroundColour = tonumber(GetVariable ("BackgroundColour")) or BackgroundColour
	height = tonumber(GetVariable ("height")) or DefaultHeight
	width = tonumber(GetVariable ("width")) or DefaultWidth

	--- install the window movement handler, get back the window position.
	windowinfo = movewindow.install (win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=DefaultX, y=DefaultY})

	--- Setup the window
	check(WindowCreate(win, 
		windowinfo.window_left, windowinfo.window_top,
		width, height,
		windowinfo.window_mode,
		windowinfo.window_flags,
		BackgroundColour))
	WindowShow(win, true)
	
	DrawWindow()

end -- OnPluginInstall

function OnPluginDisable ()
	WindowShow( win, false )
end -- OnPluginDisable

function OnPluginClose ()
	OnPluginDisable()
	WindowDelete(win)
end -- OnPluginClose

function OnPluginEnable ()
	WindowShow( win, true)

end -- OnPluginEnable


function OnPluginConnect ()
	WindowShow( win, true)

end -- function OnPluginConnect

function OnPluginDisconnect ()

end -- function OnPluginConnect

function OnPluginListChanged ()
	do_plugin_check_now ("abc1a0944ae4af7586ce88dc", "aard_repaint_buffer") -- check we have the repaint buffer plugin
	do_plugin_check_now ("3e7dedbe37e44942dd46d264", "aard_GMCP_handler")    -- check we have GMCP plugin
	do_plugin_check_now ("462b665ecb569efbf261422f", "aard_miniwindow_z_order_monitor") -- check we have z order plugin
end

function OnPluginSaveState ()
	-- save window current location for next time  
	movewindow.save_state (win)
	SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
	SetVariable ("BackgroundColour", BackgroundColour)
	SetVariable ("width", width)
	SetVariable ("height", height)
	SetVariable ("FontName", FontName)
	SetVariable ("FontSize", FontSize)
end -- function OnPluginSaveState

]]>
</script>



</muclient>
