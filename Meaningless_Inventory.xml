<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, November 21, 2016, 9:35 PM -->
<!-- MuClient version 5.03 -->

<!-- Plugin "Inventory" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Inventory"
   author="Meaningless"
   id="2a81aa8203515158d5ae426a"
   language="Lua"
   purpose="Manage Inventory in a window"
   date_written="2016-11-21 21:35:04"
   requires="5.03"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->




<script>
<![CDATA[

require "serialize"
require "movewindow"
require "commas"
require "gmcphelper"
require "copytable"
require "checkplugin"

 -- some globals and defaults -- 
BackgroundColour	= 0x000000
TitleColour			= 0xcab9ac
TitleColourLight	= 0xf7ebdd
TitleColourDark		= 0xb09784
BorderColour		= 0xcccccc
FontColour			= 0xffffff
DefaultWidth		= 200
DefaultHeight		= 150
DefaultX			= 50
DefaultY			= 250
DefaultFontSize		= 9
DefaultFontName		= "Consolas"


-- constants -- 
LEFT_MARGIN			= 10
TOP_MARGIN			= 5
TITLE_MARGIN		= 3

win = GetPluginID()
function OnPluginListChanged ()
	do_plugin_check_now ("abc1a0944ae4af7586ce88dc", "aard_repaint_buffer") -- check we have the repaint buffer plugin
	do_plugin_check_now ("3e7dedbe37e44942dd46d264", "aard_GMCP_handler")    -- check we have GMCP plugin
	do_plugin_check_now ("462b665ecb569efbf261422f", "aard_miniwindow_z_order_monitor") -- check we have z order plugin
end

function DrawTitle()
	-- draw title
	minTitleWidth = 4 + TITLE_MARGIN * 2 + WindowTextWidth(win, font_id, "QuestMaster", false) -- 4 is the number of pixels of the border
	minTitleHeight = TITLE_MARGIN * 2 + line_height -- remove 2 pix for the upper/lower space for rendering accents
	
	-- draw title
	WindowRectOp(win, 2, 1, 1, -1, minTitleHeight, TitleColour) -- title
	WindowRectOp(win, 4, 1, 1, -1, minTitleHeight, TitleColourLight, TitleColourDark) -- title border
	WindowText(win, font_id, "Inventory", TITLE_MARGIN + 2, TITLE_MARGIN, 0, 0, 0x000000) -- title text
	
	return minTitleWidth, minTitleHeight
end -- DrawTitle

function DrawWindow()

	minTitleWidth, minTitleHeight = DrawTitle()
	
	-- get window size
	contentHeight = 100 
	contentWidth = 100
	
	-- resize window
	width = math.max(contentWidth, minTitleWidth)
	height = contentHeight + minTitleHeight
	
	WindowDeleteAllHotspots(win)
	
	WindowResize(win, width, height, BackgroundColour)
	
	-- draw window
	WindowRectOp(win, 2, 0, 0, 0, 0, BackgroundColour) -- blank 
	
	-- draw borders
	WindowRectOp (win, 1, 0, 0, 0, 0, BorderColour, 15)
	WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15)
	
	-- add content to window
	

	CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win) -- fail silently
	
	-- Add the drag handler so they can move the window around
	movewindow.add_drag_handler (win, 1, 1, -1, minTitleHeight, 1) -- drag the title
	AddMouseClickHotspot("RightClickHotSpot", 1, minTitleHeight + 1, width, height)
	BroadcastPlugin (999, "repaint")
end

function AddMouseClickHotspot(hotspot_id, left, top, right, bottom, cursor)
	if cursor == nil then
		cursor = 0
	end 
	WindowAddHotspot(win, hotspot_id,  
		left, top, right, bottom,        -- rectangle
		"",        -- MouseOver
		"",  -- CancelMouseOver
		"",        -- MouseDown
		"",  -- CancelMouseDown
		"MouseUp",          -- MouseUp
		"",  -- tooltip text
		cursor, -- cursor
		0)  -- flags
end -- AddMouseClickHotspot

function UpdateWaitTimer(timerName)
	if page_built then
		EnableTimer("TNQTimer")
		if (questInfo.action == 'comp' or questInfo.action == 'fail' or questInfo.wait ~= nil) then
			GenerateToNextQuestInfo(questInfo)
			DrawWindow()
		elseif (questInfo.action == 'start' or questInfo.timer ~= nil) then
			GenerateQuestTargetInfo(questInfo)
			DrawWindow()
		elseif questInfo.action == 'killed' then
			GeneratedKilledInfo(questInfo)
			DrawWindow()
		end
	end
end -- UpdateWaitTimer

function GenerateQuestTargetInfo(questInfo)
	questInfoDisplay = {}
	local TimeToComplete = math.ceil((timeOfQuestEnd - os.time()) / 60)
	table.insert(questInfoDisplay, {label="Target    : ", info=questInfo.targ, colour=0xffffff})
	table.insert(questInfoDisplay, {label="Area      : ", info=questInfo.area, colour=0xffffff, hyperlink=""})
	table.insert(questInfoDisplay, {label="Room      : ", info=questInfo.room, colour=0xffffff, hyperlink=""})
	table.insert(questInfoDisplay, {label="Time Left : ", info=string.format("%d", TimeToComplete) .. " min", colour=0xffffff})
end -- GenerateQuestTargetInfo

function GeneratedKilledInfo(questInfo)
	questInfoDisplay = {}
	local TimeToComplete = math.ceil((timeOfQuestEnd - os.time()) / 60)
	table.insert(questInfoDisplay, {label="Your Quest Target is Killed.", info="", colour=0xff0000})
	table.insert(questInfoDisplay, {label="Return to the Quest Master.", info="", colour=0xff0000})
	table.insert(questInfoDisplay, {label="Time Left:  ", info=string.format("%d", TimeToComplete) .. " min", colour=0xffffff})
end -- GeneratedKilledInfo

function GenerateToNextQuestInfo(questInfo)
	questInfoDisplay = {}
	local TNQ = math.ceil((timeOfNextQuest - os.time() ) / 60)
	table.insert(questInfoDisplay, {label="Status : ", info="Waiting", colour=0xffffff})
	table.insert(questInfoDisplay, {label="TNQ    : ", info=string.format("%d", TNQ) .. " min", colour=0xffffff})
end -- GenerateToNextQuestInfo

function BuildQuestInfo(questInfo)
	questInfoDisplay = {}
	
	if questInfo.action == 'ready' or  questInfo.status == 'ready' then
		table.insert(questInfoDisplay, {label="Q: ", info="You can now quest again.", colour=0xffffff})
	elseif questInfo.action == 'start' or questInfo.timer ~= nil then
		timeOfQuestEnd =  os.time() + questInfo.timer * 60
		GenerateQuestTargetInfo(questInfo)
	elseif questInfo.action == 'reset' or questInfo.timer ~= nil then
		timeOfNextQuest = os.time() + questInfo.timer * 60
		GenerateToNextQuestInfo(questInfo)
	elseif questInfo.action == 'fail' or questInfo.action == 'comp' or questInfo.wait ~= nil or questInfo.action == 'timeout'then
		timeOfNextQuest = os.time() + questInfo.wait * 60
		GenerateToNextQuestInfo(questInfo)
	elseif questInfo.action == 'killed' then
		GeneratedKilledInfo(questInfo)
	elseif questInfo.action == 'warning' then

	end
	page_built = true
	DrawWindow()
end -- CreateQuestMW

function OnPluginBroadcast (msg, id, name, text)
	if id == '3e7dedbe37e44942dd46d264' then -- aard gmcp handler
		if text:find("comm.quest") then
			res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","comm.quest")
			questInfo = assert (loadstring ('return ' .. gmcparg or ""))()
			BuildQuestInfo(questInfo)
		end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
	end
end -- OnPluginBroadcast

function RightClickMenu()
	selection = WindowMenu(win, WindowInfo(win, 14), WindowInfo(win, 15),
							"Change Font | - | Bring To Front | Send To Back")
	
	if selection == "Bring To Front" then
		CallPlugin("462b665ecb569efbf261422f","boostMe", win)
	elseif selection == "Send To Back" then
		CallPlugin("462b665ecb569efbf261422f","dropMe", win)
	elseif selection == "Change Font" then
		selectedFont = utils.fontpicker (font_name, font_size) --font dialog
		if selectedFont then
			font_name = selectedFont.name
			font_size = selectedFont.size
			SetVariable("font_name", font_name)
			SetVariable("font_size", font_size)
			movewindow.save_state(win)
			SetFontInfo()
			DrawWindow()
		end
	end
end -- RightClickMenu

function MouseUp(flags, hotspot_id, win)
	if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 and hotspot_id == "RightClickHotSpot" then
		RightClickMenu()
	elseif bit.band (flags, miniwin.hotspot_got_lh_mouse) ~= 0 and hotspot_id == "AreaHotspot" then
		if QuestArea[questInfo.area].runto ~= nil then
			world.Send("runto " .. QuestArea[questInfo.area].runto)
		else
			print("Could not find " .. questInfo.area .. " in our runto list.")
		end
	elseif bit.band (flags, miniwin.hotspot_got_lh_mouse) ~= 0 and hotspot_id == "MapHotspot" then
		if QuestArea[questInfo.area].gaard ~= nil then
			OpenBrowser("http://maps.gaardian.com/index.php?areaid=" .. QuestArea[questInfo.area].gaard)
		else
			print("Could not find " .. questInfo.area .. " in our gaard list.")
		end
	end
	return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

function SetFontInfo()
	WindowFont(win, font_id, font_name, font_size, false, false, false, false) --- Grab font size settings.
	WindowFont(win, font_id_ul, font_name, font_size, false, false, true, false) --- underline font
	font_height = WindowFontInfo (win, font_id, 1) - WindowFontInfo (win, font_id, 4) + 1 -- height
	font_width  = WindowFontInfo (win, font_id, 6)  -- avg width
	line_height = font_height + 1
end -- SetFontInfo

function OnPluginInstall ()

	-- enable inventory tagging
	world.Send("tags Inv on")
	
	
	-- set up windows
	WindowCreate (win, 600, 600, 1, 1, 0, 0, BackgroundColour) 

	font_id        = "Inventory_font"
	local fonts = utils.getfontfamilies()
	font_name = GetVariable("font_name") or DefaultFontName
	font_size = tonumber(GetVariable("font_size")) or DefaultFontSize
	
	SetFontInfo()

	--- Pull some state variables.
	BackgroundColour = tonumber(GetVariable ("BackgroundColour")) or BackgroundColour
	height = tonumber(GetVariable ("height")) or DefaultHeight
	width = tonumber(GetVariable ("width")) or DefaultWidth

	--- install the window movement handler, get back the window position.
	windowinfo = movewindow.install (win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=DefaultX, y=DefaultY})

	--- Setup the window
	check(WindowCreate(win, 
		windowinfo.window_left, windowinfo.window_top,
		width, height,
		windowinfo.window_mode,
		windowinfo.window_flags,
		BackgroundColour))
	WindowShow(win, true)
	
	DrawWindow()

	if IsConnected() then
		Send_GMCP_Packet("request quest")
	end
end -- OnPluginInstall

function OnPluginDisable ()
	WindowShow( win, false )
end -- OnPluginDisable

function OnPluginClose ()
	OnPluginDisable()
	WindowDelete(win)
end -- OnPluginClose

function OnPluginEnable ()
	WindowShow( win, true)

	if IsConnected() then
		Send_GMCP_Packet("request quest")
	end

end -- OnPluginEnable


function OnPluginConnect ()
	WindowShow( win, true)

	Send_GMCP_Packet("request quest")

end -- function OnPluginConnect

function OnPluginDisconnect ()

end -- function OnPluginConnect



function OnPluginSaveState ()
	-- save window current location for next time  
	movewindow.save_state (win)
	SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
	SetVariable ("BackgroundColour", BackgroundColour)
	SetVariable ("width", width)
	SetVariable ("height", height)
	SetVariable ("font_name", font_name)
	SetVariable ("font_size", font_size)
end -- function OnPluginSaveState

]]>
</script>



</muclient>
