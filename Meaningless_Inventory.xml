<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, November 21, 2016, 9:35 PM -->
<!-- MuClient version 5.03 -->

<!-- Plugin "Inventory" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Inventory"
   author="Meaningless"
   id="2a81aa8203515158d5ae426a"
   language="Lua"
   purpose="Manage Inventory in a window"
   date_written="2016-11-21 21:35:04"
   requires="5.03"
   version="1.0"
   save_state="y"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->
<triggers>

  <trigger
   enabled="y"
   match="{invdata}"
   script="ProcessInventory"
   omit_from_output="y"
   name="InventoryStart"
   sequence="100"
   group="InventoryGroup"
  >
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="ProcessInventory"
   omit_from_output="y"
   name="InventoryLines"
   sequence="200"
   group="InventoryGroup"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="{/invdata}"
   script="ProcessInventory"
   omit_from_output="y"
   name="InventoryEnd"
   sequence="100"
   group="InventoryGroup"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="{eqdata}"
   script="ProcessEquip"
   omit_from_output="y"
   name="EquipStart"
   sequence="100"
   group="EquipGroup"
  >
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="ProcessEquip"
   omit_from_output="y"
   name="EquipLines"
   sequence="200"
   group="EquipGroup"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="{/eqdata}"
   script="ProcessEquip"
   omit_from_output="y"
   name="EquipEnd"
   sequence="100"
   group="EquipGroup"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="^{invmon}.+"
   regexp="y"
   script="InventoryChange"
   omit_from_output="y"
   name="InvMonTrigger"
   sequence="200"
  >
  </trigger>
  
  
  <trigger
   enabled="y"
   match="^{invitem}.+"
   regexp="y"
   script="ProcessItemInfoTag"
   omit_from_output="y"
   name="ItemTagTrigger"
   sequence="1"
   group="InventoryGroup"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="Tag option inv turned *"
   omit_from_output="y"
   name="TagToggleFeedback"
   sequence="1"
   group="TagGroup"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="You will * see inventory update tags."
   omit_from_output="y"
   name="InvmonToggleFeedback"
   sequence="1"
   group="TagGroup"
  >
  </trigger>
  
</triggers>

<aliases>

  <alias
   script="ToggleWindow"
   match="minv"
   enabled="y"
   sequence="100"
  >
  </alias>
</aliases>

<script>
<![CDATA[

require "serialize"
require "movewindow"
require "commas"
require "gmcphelper"
require "copytable"
require "checkplugin"

 -- some globals and defaults -- 
BackgroundColour	= 0x000000
TitleColour			= 0xcab9ac
TitleColourLight	= 0xf7ebdd
TitleColourDark		= 0xb09784

TrackColor			= 0x257b00
TrackBorder			= 0x257b00
GripColor			= 0x596b5d

BorderColour		= 0xcccccc
FontColour			= 0xffffff
DefaultWidth		= 200
DefaultHeight		= 150
DefaultX			= 50
DefaultY			= 250
DefaultFontSize		= 9
DefaultFontName		= "Consolas"
IsShown				= false
IsProcessed			= false
EqDataLoaded		= false

InvData				= {}
InvmonHolding		= {}
InvDisplay			= {}
KnownItems			= {}

ScrollItemIndex		= 1
ThisPluginIsOpeningTheWindow = false


-- constants -- 
LEFT_MARGIN			= 10
TOP_MARGIN			= 5
TITLE_MARGIN		= 3
QTY_CHARWIDTH		= 2
FLAG_CHARWIDTH		= 5
SCROLLBAR_WIDTH		= 8
NUM_ITEMS_TO_SHOW	= 20

win = GetPluginID()

function strsplit(s, delim) -- gmatch can't split consec delims "a,b,,d" into {"a","b","","d"}
	local tab = {}
	local buffer = ""
	for i = 1, #s do
		local c = s:sub(i,i)
		if c == delim then
			table.insert(tab, buffer)
			buffer = ""
		else
			buffer = buffer .. c
		end
	end
	if buffer ~= "" then
		table.insert(tab, buffer)
	end
	return tab

end -- strsplit

function ProcessInvmonTag(invmonTag)
	local x = strsplit(invmonTag, ",")
	local invChange = {action = x[1], objectid = x[2], containerid = x[3], wearloc = x[4]}
	return invChange
end -- ProcessInvmonTag

function ProcessInvitemTag(invitemTag)
	local x = strsplit(invitemTag, ",")
	local item = {objectid = x[1], flags = x[2], itemname = x[3], type = x[4], unique = x[5], wearloc = x[6], timer = x[7]}
	
	return item
end -- ProcessInvitemTag

function ColourText(win, text, left, top, right, bottom)
	local colourText = processColourText(text)
	local textwidth = 0
	for i, v in ipairs(colourText) do
		textwidth = textwidth + WindowText(win, FontId, v.label, left + textwidth, top, right, bottom, v.colour)
	end
	return textwidth
end -- ColourText

function ColourTextWidth(win, text, unicode)
	local colourText = processColourText(text)
	local textwidth = 0
	for i, v in ipairs(colourText) do
		textwidth = textwidth + WindowTextWidth(win, FontId, v.label, unicode)
	end
	return textwidth
end -- ColourText

function FormattedInv()
	local invtab = {}
	for i, v in ipairs(InvData) do
		found = false
		for k, w in ipairs(invtab) do
			if v.itemname == w.name and v.flags == w.flags then
				w.quantity = w.quantity + 1
				found = true
				break
			end
		end
		if not found then
			table.insert(invtab, {name = v.itemname, quantity = 1, flags = v.flags})
		end
	end
	IsProcessed = true
	return invtab
end --FormattedInv

function processColourText(text)
	local textTable = {}
	local colour = ""
	local possibleColour = ""
	local label = ""
	local atSignOn = false
	local xtermOn = false
	local xtermCount = 1
	for c = 1, #text do
		local i = text:sub(c,c)
		if i == "@" and not atSignOn then
			atSignOn = true
		elseif atSignOn then
			if i == "x" then -- xterm colour
				xtermOn = true
				possibleColour = "@x"
			elseif xtermOn then -- continue parsing x colour
				if xtermCount <= 3 and string.match(i, "%d") ~= nil then -- is digit and still under xterm length
					possibleColour = possibleColour .. i
					xtermCount = xtermCount + 1
				else -- end of xterm, looks like a color, send buffer to table and reset buffer
					xtermOn = false
					atSignOn = false
					xtermCount = 1
					
					if label ~= "" then
						table.insert(textTable, {label = label, colour = AardRGB[(colour == "") and "@w" or colour]})
					end
					colour = possibleColour
					label = i
					possibleColour = ""
				end
			elseif i == "@" then -- @ char
				atSignOn = false
				label = label .. "@"
				state = "state 4"
			else -- ansi colour, get ansi char and terminate
				if label ~= "" then
					table.insert(textTable, {label = label, colour = AardRGB[(colour == "") and "@w" or colour]})
				end
				label = ""
				colour = "@" .. i
				atSignOn = false
			end
		else
			label = label .. i
		end
	end
	if label ~= "" then
		table.insert(textTable, {label = label, colour = AardRGB[(colour == "") and "@w" or colour]})
	end
	return textTable
end -- processColourText

function ProcessInventory(name, line, wildcards, styles)
	if name == "InventoryStart" then
		InvData = {}
		EnableTrigger("InventoryLines", true)
	elseif name == "InventoryEnd" then
		EnableTrigger("InventoryLines", false)
		if ThisPluginIsOpeningTheWindow then
			DrawWindow()
			ThisPluginIsOpeningTheWindow = false
		end
	elseif name == "InventoryLines" then
		table.insert(InvData, ProcessInvitemTag(line))
	end
end -- ProcessInventory


function ProcessEquip(name, line, wildcards, styles)
	if name == "EquipStart" then
		EnableTrigger("EquipLines", true)
	elseif name == "EquipEnd" then
		EnableTrigger("EquipLines", false)
		EqDataLoaded = true
	elseif name == "EquipLines" then
		AddToKnownItems(ProcessInvitemTag(line))
	end
end -- ProcessInventory


function AddToKnownItems(invTagData)
	local alreadyAdded = false
	for i, v in ipairs(KnownItems) do
		if invTagData.objectid == v.objectid then
			alreadyAdded = true
			break
		end
	end 
	if not alreadyAdded then
		table.insert(KnownItems, invTagData)
	end
end -- AddToKnownItems

function InventoryChange(name, line, wildcards, styles)
	-- don't do anything if inventory is not shown or prepared
	if IsShown and IsProcessed then
		-- strip out {invmon} from line
		local invmon = string.gsub(line, "{invmon}", "")
		local invChange = ProcessInvmonTag(invmon)
		if invChange.action == "2" or invChange.action == "3" or invChange.action == "6"
			or invChange.action == "7" or invChange.action == "9" or invChange.action == "11" then
			-- moved out of inv
			for i, v in ipairs(InvData) do
				if v.objectid == invChange.objectid then
					table.remove(InvData, i)
					break
				end
			end
			
			-- destroyed, sold
			if invChange.action == "3" or invChange.action == "7" then
				for i, v in ipairs(KnownItems) do
					if v.objectid == invChange.objectid then
						table.remove(KnownItems, i)
						break
					end
				end
			end
			
		else
			-- this covers all the other cases of moving item into inv
			local added = false
			for i, v in ipairs(InvmonHolding) do
				if invChange.objectid == v.objectid then
					table.insert(InvData, 1, v)
					added = true
					break
				end
			end
			if not added then
				for i, v in ipairs(KnownItems) do
					if invChange.objectid == v.objectid then
						table.insert(InvData, 1, v)
						break
					end
				end
			end
			InvmonHolding = {}
		end
		DrawWindow()
	end
end -- InventoryChange

function ProcessItemInfoTag(name, line, wildcards, styles)
	-- don't do anything if inventory is not shown or prepared
	if IsShown and IsProcessed then
		-- strip out {invitem} from line
		local itemtag = string.gsub(line, "{invitem}", "")
		table.insert(InvmonHolding, ProcessInvitemTag(itemtag))
		-- put it in a holding table first and allow the invmon trigger to add it into inventory
	end
end -- ProcessItemInfoTag

function PrintInventoryLine(item, top)

	-- quantity
	WindowText(win, FontId, item.quantity, LEFT_MARGIN + ((item.quantity < 10) and FontWidth or 0), top, 0, 0, AardRGB["@w"])
	
	-- flags
	local flagColour = {
	["K"] = AardRGB["@R"],
	["M"] = AardRGB["@B"],
	["G"] = AardRGB["@W"],
	["H"] = AardRGB["@C"],
	["I"] = AardRGB["@w"],
	}
	for i = 1, #item.flags do
		local f = item.flags:sub(i,i)
		WindowText(win, FontId, f, LEFT_MARGIN + FontWidth * (QTY_CHARWIDTH + i) , top, 0, 0, 
			(flagColour[f] == nil) and AardRGB["@w"] or flagColour[f]) -- colour
	end
	
	-- name
	left = left + ColourText(win, item.name, LEFT_MARGIN + FontWidth * (QTY_CHARWIDTH + FLAG_CHARWIDTH + 2), top, 0, 0)
	
end -- PrintInventoryLine

function DrawTitle()
	local minTitleHeight = TITLE_MARGIN * 2 + LineHeight
	
	-- draw title
	WindowRectOp(win, 2, 1, 1, -1, minTitleHeight, TitleColour) -- title
	WindowRectOp(win, 4, 1, 1, -1, minTitleHeight, TitleColourLight, TitleColourDark) -- title border
	WindowText(win, FontId, "Inventory", TITLE_MARGIN + 2, TITLE_MARGIN, 0, 0, 0x000000) -- title text
	
end -- DrawTitle

function DrawScrollBar(firstItemIndex, totalItems)
	-- don't do anything if inv not processed
	if IsProcessed then
	
		local numItems = totalItems + 1 -- 1 blank line at the bottom
		
		if  numItems > NUM_ITEMS_TO_SHOW then
			-- only build scroll bar if scroll needed
			local minTitleHeight = TITLE_MARGIN * 2 + LineHeight
			
			local trackX = width - SCROLLBAR_WIDTH - 2
			local trackY = minTitleHeight + 1
			local trackX2 = width - 2	 -- 2 pix away from edge
			local trackY2 = height - 2
			
			local TrackLength = trackY2 - trackY - 2
			local GripLength = math.floor(NUM_ITEMS_TO_SHOW / numItems * TrackLength)
			
			local gripX = trackX + 1
			local gripX2 = trackX2 -1
			local gripY = math.floor((firstItemIndex - 1) / numItems * TrackLength) + trackY + 1
			local gripY2 = math.min(gripY + GripLength, trackY2 - 1)
			
			-- black out previous bar
			WindowRectOp(win, 2, trackX, trackY, trackX2, trackY2, BackgroundColour)
			
			-- grip
			WindowCircleOp(win, miniwin.circle_round_rectangle, 
							gripX, gripY, gripX2, gripY2, 
							GripColor, 0, 0, -- pen color, style, width 
							GripColor, miniwin.brush_coarse_pattern, -- brush color, style
							5, 5)  -- roundedness
			
			BroadcastPlugin (999, "repaint")
		end
	end

end -- DrawScrollBar

function DrawContent(firstItemIndex)

	local minTitleHeight = TITLE_MARGIN * 2 + LineHeight

	-- black out old content
	WindowRectOp(win, 2, 
			LEFT_MARGIN, minTitleHeight + TOP_MARGIN, width - SCROLLBAR_WIDTH, height - TOP_MARGIN, BackgroundColour, 15)
	
	local subInv = {unpack(InvDisplay, firstItemIndex, firstItemIndex + NUM_ITEMS_TO_SHOW - 1)}
	
	
	-- draw table headers
	WindowText(win, FontId, "Q  Flags Name", LEFT_MARGIN, TOP_MARGIN + minTitleHeight, 0, 0, AardRGB["@w"])
	WindowText(win, FontId, "== ===== =========================", 
				LEFT_MARGIN, TOP_MARGIN + LineHeight + minTitleHeight, 0, 0, AardRGB["@w"])
	
	-- add content to window
	for i, v in ipairs(subInv) do
		top = minTitleHeight + TOP_MARGIN + (i+1) * LineHeight
		PrintInventoryLine(v, top)
	end 
	
	DrawScrollBar(firstItemIndex, #InvDisplay)

end -- DrawContent


function DrawWindow()
	local minTitleHeight = TITLE_MARGIN * 2 + LineHeight
	
	-- get window size
	local contentHeight = TOP_MARGIN * 2
	local contentWidth = DefaultWidth
	InvDisplay = FormattedInv()
	for i, v in ipairs(InvDisplay) do
		top = TOP_MARGIN + (i-1) * LineHeight
		left = LEFT_MARGIN * 2 + FontWidth * (QTY_CHARWIDTH + FLAG_CHARWIDTH + 2) + 
				ColourTextWidth(win, v.name, false)
		contentWidth = math.max(contentWidth, left)
	end
	
	-- resize window
	width = contentWidth + SCROLLBAR_WIDTH
	height = TOP_MARGIN * 2 + (2 + NUM_ITEMS_TO_SHOW) * LineHeight + minTitleHeight
	
	WindowDeleteAllHotspots(win)
	
	WindowResize(win, width, height, BackgroundColour)
	
	-- draw window
	WindowRectOp(win, 2, 0, minTitleHeight, 0, 0, BackgroundColour) -- blank 
	
	DrawTitle()
	
	-- draw borders
	WindowRectOp(win, 1, 0, 0, 0, 0, BorderColour, 15)
	WindowRectOp(win, 1, 1, 1, -1, -1, 0x777777, 15)
	
	-- reset scroll index
	ScrollItemIndex = 1
	DrawContent(ScrollItemIndex)
	
	CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win) -- fail silently
	
	-- Add the drag handler so they can move the window around
	movewindow.add_drag_handler (win, 1, 1, -1, minTitleHeight, 1) -- drag the title
	AddMouseClickHotspot("RightClickHotSpot", 1, minTitleHeight + 1, width, height)
	WindowScrollwheelHandler(win, "RightClickHotSpot", "ScrollwheelMove")
	BroadcastPlugin (999, "repaint")
	WindowShow(win, true)
	IsShown = true

end -- DrawWindow

function ScrollwheelMove(flags, hotspot_id)
	if bit.band (flags, 0x100) ~= 0 then
		if ScrollItemIndex < #InvDisplay - NUM_ITEMS_TO_SHOW + 2 then
			ScrollItemIndex = ScrollItemIndex + 1
			DrawContent(ScrollItemIndex)
		end
	else
		if ScrollItemIndex > 1 then
			ScrollItemIndex = ScrollItemIndex - 1
			DrawContent(ScrollItemIndex)
		end
	end -- if
	return 0 -- needed for some languages
end -- wheel_move

function ToggleWindow()
	if IsShown then	
		WindowShow(win, false)
		IsShown = false
		return false
	else
		if not EqDataLoaded then
			world.SendNoEcho("eqdata")
		end
		ThisPluginIsOpeningTheWindow = true
		world.SendNoEcho("invdata")
		return true
	end
end -- ToggleWindow

function AddMouseClickHotspot(hotspot_id, left, top, right, bottom, cursor)
	if cursor == nil then
		cursor = 0
	end 
	WindowAddHotspot(win, hotspot_id,  
		left, top, right, bottom,        -- rectangle
		"",        -- MouseOver
		"",  -- CancelMouseOver
		"",        -- MouseDown
		"",  -- CancelMouseDown
		"MouseUp",          -- MouseUp
		"",  -- tooltip text
		cursor, -- cursor
		0)  -- flags
end -- AddMouseClickHotspot

function OnPluginBroadcast (msg, id, name, text)
	if id == '3e7dedbe37e44942dd46d264' then -- aard gmcp handler
		-- pass
	elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
		CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
	end
end -- OnPluginBroadcast

function RightClickMenu()
	selection = WindowMenu(win, WindowInfo(win, 14), WindowInfo(win, 15),
							"Change Font | - | Bring To Front | Send To Back")
	
	if selection == "Bring To Front" then
		CallPlugin("462b665ecb569efbf261422f","boostMe", win)
	elseif selection == "Send To Back" then
		CallPlugin("462b665ecb569efbf261422f","dropMe", win)
	elseif selection == "Change Font" then
		selectedFont = utils.fontpicker (FontName, FontSize) --font dialog
		if selectedFont then
			FontName = selectedFont.name
			FontSize = selectedFont.size
			SetVariable("FontName", FontName)
			SetVariable("FontSize", FontSize)
			movewindow.save_state(win)
			SetFontInfo()
			DrawWindow()
		end
	end
end -- RightClickMenu

function MouseUp(flags, hotspot_id, win)
	if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 and hotspot_id == "RightClickHotSpot" then
		RightClickMenu()
	end
	return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

function SetFontInfo()
	WindowFont(win, FontId, FontName, FontSize, false, false, false, false) --- Grab font size settings.
	FontHeight = WindowFontInfo (win, FontId, 1) - WindowFontInfo (win, FontId, 4) + 1 -- height
	FontWidth  = WindowFontInfo (win, FontId, 6)  -- avg width
	LineHeight = FontHeight + 1
end -- SetFontInfo

function OnPluginInstall ()

	-- set up windows
	WindowCreate (win, 600, 600, 1, 1, 0, 0, BackgroundColour) 

	FontId        = "Inventory_font"
	local fonts = utils.getfontfamilies()
	FontName = GetVariable("FontName") or DefaultFontName
	FontSize = tonumber(GetVariable("FontSize")) or DefaultFontSize
	
	SetFontInfo()

	--- Pull some state variables.
	BackgroundColour = tonumber(GetVariable ("BackgroundColour")) or BackgroundColour
	height = tonumber(GetVariable ("height")) or DefaultHeight
	width = tonumber(GetVariable ("width")) or DefaultWidth
	
	--- install the window movement handler, get back the window position.
	windowinfo = movewindow.install (win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=DefaultX, y=DefaultY})

	--- Setup the window
	check(WindowCreate(win, 
		windowinfo.window_left, windowinfo.window_top,
		width, height,
		windowinfo.window_mode,
		windowinfo.window_flags,
		BackgroundColour))
	
	WindowShow(win, false)
end -- OnPluginInstall

function OnPluginDisable ()
	WindowShow(win, false)	
	-- disable inventory tagging
	world.SendNoEcho("invmon off")
	
end -- OnPluginDisable

function OnPluginClose ()
	OnPluginDisable()
	WindowDelete(win)
	
end -- OnPluginClose

function OnPluginEnable ()
	WindowShow(win, false)
	
	-- enable inventory tagging
	world.SendNoEcho("eqdata")
	world.SendNoEcho("invmon on")
end -- OnPluginEnable


function OnPluginConnect()
	WindowShow(win, false)
	
	-- enable inventory tagging
	world.SendNoEcho("invmon on")
	world.SendNoEcho("eqdata")
	
end -- function OnPluginConnect

function OnPluginDisconnect ()

end -- function OnPluginConnect

function OnPluginListChanged ()
	do_plugin_check_now ("abc1a0944ae4af7586ce88dc", "aard_repaint_buffer") -- check we have the repaint buffer plugin
	do_plugin_check_now ("3e7dedbe37e44942dd46d264", "aard_GMCP_handler")    -- check we have GMCP plugin
	do_plugin_check_now ("462b665ecb569efbf261422f", "aard_miniwindow_z_order_monitor") -- check we have z order plugin
end

function OnPluginSaveState ()
	-- save window current location for next time  
	movewindow.save_state(win)
	SetVariable("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
	SetVariable("FontName", FontName)
	SetVariable("FontSize", FontSize)
end -- function OnPluginSaveState

AardRGB = {
	["@b"] = GetNormalColour(5),
	["@r"] = GetNormalColour(2),
	["@g"] = GetNormalColour(3),
	["@y"] = GetNormalColour(4),
	["@c"] = GetNormalColour(7),
	["@m"] = GetNormalColour(6),
	["@w"] = GetNormalColour(8),
	["@B"] = GetBoldColour(5),
	["@R"] = GetBoldColour(2),
	["@G"] = GetBoldColour(3),
	["@Y"] = GetBoldColour(4),
	["@C"] = GetBoldColour(7),
	["@M"] = GetBoldColour(6),
	["@W"] = GetBoldColour(8),
	["@D"] = GetBoldColour(1),
	["@x0"] = "0x000000",
	["@x1"] = "0x000080",
	["@x2"] = "0x008000",
	["@x3"] = "0x008080",
	["@x4"] = "0x800000",
	["@x5"] = "0x800080",
	["@x6"] = "0x808000",
	["@x7"] = "0xc0c0c0",
	["@x8"] = "0x808080",
	["@x9"] = "0x0000ff",
	["@x10"] = "0x00ff00",
	["@x11"] = "0x00ffff",
	["@x12"] = "0xff0000",
	["@x13"] = "0xff00ff",
	["@x14"] = "0xffff00",
	["@x15"] = "0xffffff",
	["@x16"] = "0x000000",
	["@x17"] = "0x5f0000",
	["@x18"] = "0x870000",
	["@x19"] = "0xaf0000",
	["@x20"] = "0xd70000",
	["@x21"] = "0xff0000",
	["@x22"] = "0x005f00",
	["@x23"] = "0x5f5f00",
	["@x24"] = "0x875f00",
	["@x25"] = "0xaf5f00",
	["@x26"] = "0xd75f00",
	["@x27"] = "0xff5f00",
	["@x28"] = "0x008700",
	["@x29"] = "0x5f8700",
	["@x30"] = "0x878700",
	["@x31"] = "0xaf8700",
	["@x32"] = "0xd78700",
	["@x33"] = "0xff8700",
	["@x34"] = "0x00af00",
	["@x35"] = "0x5faf00",
	["@x36"] = "0x87af00",
	["@x37"] = "0xafaf00",
	["@x38"] = "0xd7af00",
	["@x39"] = "0xffaf00",
	["@x40"] = "0x00d700",
	["@x41"] = "0x5fd700",
	["@x42"] = "0x87d700",
	["@x43"] = "0xafd700",
	["@x44"] = "0xd7d700",
	["@x45"] = "0xffd700",
	["@x46"] = "0x00ff00",
	["@x47"] = "0x5fff00",
	["@x48"] = "0x87ff00",
	["@x49"] = "0xafff00",
	["@x50"] = "0xd7ff00",
	["@x51"] = "0xffff00",
	["@x52"] = "0x00005f",
	["@x53"] = "0x5f005f",
	["@x54"] = "0x87005f",
	["@x55"] = "0xaf005f",
	["@x56"] = "0xd7005f",
	["@x57"] = "0xff005f",
	["@x58"] = "0x005f5f",
	["@x59"] = "0x5f5f5f",
	["@x60"] = "0x875f5f",
	["@x61"] = "0xaf5f5f",
	["@x62"] = "0xd75f5f",
	["@x63"] = "0xff5f5f",
	["@x64"] = "0x00875f",
	["@x65"] = "0x5f875f",
	["@x66"] = "0x87875f",
	["@x67"] = "0xaf875f",
	["@x68"] = "0xd7875f",
	["@x69"] = "0xff875f",
	["@x70"] = "0x00af5f",
	["@x71"] = "0x5faf5f",
	["@x72"] = "0x87af5f",
	["@x73"] = "0xafaf5f",
	["@x74"] = "0xd7af5f",
	["@x75"] = "0xffaf5f",
	["@x76"] = "0x00d75f",
	["@x77"] = "0x5fd75f",
	["@x78"] = "0x87d75f",
	["@x79"] = "0xafd75f",
	["@x80"] = "0xd7d75f",
	["@x81"] = "0xffd75f",
	["@x82"] = "0x00ff5f",
	["@x83"] = "0x5fff5f",
	["@x84"] = "0x87ff5f",
	["@x85"] = "0xafff5f",
	["@x86"] = "0xd7ff5f",
	["@x87"] = "0xffff5f",
	["@x88"] = "0x000087",
	["@x89"] = "0x5f0087",
	["@x90"] = "0x870087",
	["@x91"] = "0xaf0087",
	["@x92"] = "0xd70087",
	["@x93"] = "0xff0087",
	["@x94"] = "0x005f87",
	["@x95"] = "0x5f5f87",
	["@x96"] = "0x875f87",
	["@x97"] = "0xaf5f87",
	["@x98"] = "0xd75f87",
	["@x99"] = "0xff5f87",
	["@x100"] = "0x008787",
	["@x101"] = "0x5f8787",
	["@x102"] = "0x878787",
	["@x103"] = "0xaf8787",
	["@x104"] = "0xd78787",
	["@x105"] = "0xff8787",
	["@x106"] = "0x00af87",
	["@x107"] = "0x5faf87",
	["@x108"] = "0x87af87",
	["@x109"] = "0xafaf87",
	["@x110"] = "0xd7af87",
	["@x111"] = "0xffaf87",
	["@x112"] = "0x00d787",
	["@x113"] = "0x5fd787",
	["@x114"] = "0x87d787",
	["@x115"] = "0xafd787",
	["@x116"] = "0xd7d787",
	["@x117"] = "0xffd787",
	["@x118"] = "0x00ff87",
	["@x119"] = "0x5fff87",
	["@x120"] = "0x87ff87",
	["@x121"] = "0xafff87",
	["@x122"] = "0xd7ff87",
	["@x123"] = "0xffff87",
	["@x124"] = "0x0000af",
	["@x125"] = "0x5f00af",
	["@x126"] = "0x8700af",
	["@x127"] = "0xaf00af",
	["@x128"] = "0xd700af",
	["@x129"] = "0xff00af",
	["@x130"] = "0x005faf",
	["@x131"] = "0x5f5faf",
	["@x132"] = "0x875faf",
	["@x133"] = "0xaf5faf",
	["@x134"] = "0xd75faf",
	["@x135"] = "0xff5faf",
	["@x136"] = "0x0087af",
	["@x137"] = "0x5f87af",
	["@x138"] = "0x8787af",
	["@x139"] = "0xaf87af",
	["@x140"] = "0xd787af",
	["@x141"] = "0xff87af",
	["@x142"] = "0x00afaf",
	["@x143"] = "0x5fafaf",
	["@x144"] = "0x87afaf",
	["@x145"] = "0xafafaf",
	["@x146"] = "0xd7afaf",
	["@x147"] = "0xffafaf",
	["@x148"] = "0x00d7af",
	["@x149"] = "0x5fd7af",
	["@x150"] = "0x87d7af",
	["@x151"] = "0xafd7af",
	["@x152"] = "0xd7d7af",
	["@x153"] = "0xffd7af",
	["@x154"] = "0x00ffaf",
	["@x155"] = "0x5fffaf",
	["@x156"] = "0x87ffaf",
	["@x157"] = "0xafffaf",
	["@x158"] = "0xd7ffaf",
	["@x159"] = "0xffffaf",
	["@x160"] = "0x0000d7",
	["@x161"] = "0x5f00d7",
	["@x162"] = "0x8700d7",
	["@x163"] = "0xaf00d7",
	["@x164"] = "0xd700d7",
	["@x165"] = "0xff00d7",
	["@x166"] = "0x005fd7",
	["@x167"] = "0x5f5fd7",
	["@x168"] = "0x875fd7",
	["@x169"] = "0xaf5fd7",
	["@x170"] = "0xd75fd7",
	["@x171"] = "0xff5fd7",
	["@x172"] = "0x0087d7",
	["@x173"] = "0x5f87d7",
	["@x174"] = "0x8787d7",
	["@x175"] = "0xaf87d7",
	["@x176"] = "0xd787d7",
	["@x177"] = "0xff87d7",
	["@x178"] = "0x00afd7",
	["@x179"] = "0x5fafd7",
	["@x180"] = "0x87afd7",
	["@x181"] = "0xafafd7",
	["@x182"] = "0xd7afd7",
	["@x183"] = "0xffafd7",
	["@x184"] = "0x00d7d7",
	["@x185"] = "0x5fd7d7",
	["@x186"] = "0x87d7d7",
	["@x187"] = "0xafd7d7",
	["@x188"] = "0xd7d7d7",
	["@x189"] = "0xffd7d7",
	["@x190"] = "0x00ffd7",
	["@x191"] = "0x5fffd7",
	["@x192"] = "0x87ffd7",
	["@x193"] = "0xafffd7",
	["@x194"] = "0xd7ffd7",
	["@x195"] = "0xffffd7",
	["@x196"] = "0x0000ff",
	["@x197"] = "0x5f00ff",
	["@x198"] = "0x8700ff",
	["@x199"] = "0xaf00ff",
	["@x200"] = "0xd700ff",
	["@x201"] = "0xff00ff",
	["@x202"] = "0x005fff",
	["@x203"] = "0x5f5fff",
	["@x204"] = "0x875fff",
	["@x205"] = "0xaf5fff",
	["@x206"] = "0xd75fff",
	["@x207"] = "0xff5fff",
	["@x208"] = "0x0087ff",
	["@x209"] = "0x5f87ff",
	["@x210"] = "0x8787ff",
	["@x211"] = "0xaf87ff",
	["@x212"] = "0xd787ff",
	["@x213"] = "0xff87ff",
	["@x214"] = "0x00afff",
	["@x215"] = "0x5fafff",
	["@x216"] = "0x87afff",
	["@x217"] = "0xafafff",
	["@x218"] = "0xd7afff",
	["@x219"] = "0xffafff",
	["@x220"] = "0x00d7ff",
	["@x221"] = "0x5fd7ff",
	["@x222"] = "0x87d7ff",
	["@x223"] = "0xafd7ff",
	["@x224"] = "0xd7d7ff",
	["@x225"] = "0xffd7ff",
	["@x226"] = "0x00ffff",
	["@x227"] = "0x5fffff",
	["@x228"] = "0x87ffff",
	["@x229"] = "0xafffff",
	["@x230"] = "0xd7ffff",
	["@x231"] = "0xffffff",
	["@x232"] = "0x080808",
	["@x233"] = "0x121212",
	["@x234"] = "0x1c1c1c",
	["@x235"] = "0x262626",
	["@x236"] = "0x303030",
	["@x237"] = "0x3a3a3a",
	["@x238"] = "0x444444",
	["@x239"] = "0x4e4e4e",
	["@x240"] = "0x585858",
	["@x241"] = "0x606060",
	["@x242"] = "0x666666",
	["@x243"] = "0x767676",
	["@x244"] = "0x808080",
	["@x245"] = "0x8a8a8a",
	["@x246"] = "0x949494",
	["@x247"] = "0x9e9e9e",
	["@x248"] = "0xa8a8a8",
	["@x249"] = "0xb2b2b2",
	["@x250"] = "0xbcbcbc",
	["@x251"] = "0xc6c6c6",
	["@x252"] = "0xd0d0d0",
	["@x253"] = "0xdadada",
	["@x254"] = "0xe4e4e4",
	["@x255"] = "0xeeeeee",
}

]]>
</script>


<script>
<![CDATA[

function colorRegex(text) -- doesn't work in lua. ext libs no tks
	if text:sub(1,1) ~= "@" then
		text = "@w" .. text
	end
	local tb = {}
	for x,y in string.gmatch(text, "(@[BbRrGgYyCcMmWwD]|@x[0-9]{1,3})([%w%s]+)") do
		table.insert(tb, {text = y, colour = x})
	end
end -- colorRegex
]]>
</script>


</muclient>
